_ = require("lodash");


const content = `
        <div class="progress">
            <input type="range" min=0 max=100 value=0>
        </div>

        <ul>
          <li><i class="icon-to-start vcr-rewind"></i></li>
          <li><i class="icon-play vcr-play"></i><i class="icon-stop vcr-stop"></i></li>
          <li><i class="icon-left-open vcr-slower"></i>
          <span class="speed">&times;<span class="speed-value">1</span></span>
          <i class="icon-right-open vcr-faster"></i>
          </li>
        </ul>
`;

const fractions = [ "??",       "&#8539;", "&frac14", "&#8540;",
                    "&frac12;", "&#8541;", "&frac34", "&#8542;" ];

export default class View {

    constructor(controls, state, controller) {
        this.controls   = controls;
        this.controller = controller;
        this.state      = state;
        this.populate(this.controls, state);
    }

    populate(controls, state) {
        controls.html(content);

        this.progress = controls.find(".progress input");

        this.setupCallbacks(controls);

        this.playButton = controls.find(".vcr-play");
        this.stopButton = controls.find(".vcr-stop");
        this.speedValue = controls.find(".speed-value");

        this.setState(state);
    }

    setState(state) {
        this.state = state;
        console.dir(["view: setState", state]);
        if (state.playing) {
            this.playButton.hide();
            this.stopButton.show();
        }
        else {
            this.playButton.show();
            this.stopButton.hide();
        }
        this.setSpeed(state.speed);
        this.setPlayhead(state.playhead / state.duration);
    }

    /* Accepts a value from 0 to 1 */
    setPlayhead(playhead) {
        if (playhead === 0)
            console.log("zero");
        console.dir(["playhead", playhead]);
        this.progress.val(playhead * 100);
    }

    setSpeed(speed) {
        if (speed < 1)
            speed = this.fraction(speed);
        this.speedValue.html(speed);
    }

    fraction(val) {
        val = Math.round(val*8);
        if (val < 1 || val > 7)
            return "??";
        else
            return fractions[val];

    }

    setupCallbacks(controls) {
        controls.on("click", ".vcr-rewind",
                    (event) => { return this.rewind(event); });

        controls.on("click", ".vcr-stop",
                    (event) => { return this.stop(event); });

        controls.on("click", ".vcr-play",
                    (event) => { return this.play(event); });

        controls.on("click", ".vcr-slower",
                    (event) => { return this.slower(event); });

        controls.on("click", ".vcr-faster",
                    (event) => { return this.faster(event); });

        this.progress.on("change input",
                    (event) => { return this.movePlayerPlayhead(event) });
    }

    play(event) {
        this.controller.play();
    }

    stop(event) {
        this.controller.stop();
    }

    setPlayhead(event) {
        console.dir(this.state.progress/this.state.duration * 100);
    }

    rewind(event) {
        console.dir("rewind");
        this.controller.rewind();
    }

    slower(event) {
        console.dir("slower");
        this.controller.slower();
    }

    faster(event) {
        console.dir("faster");
        this.controller.faster();
    }
};
